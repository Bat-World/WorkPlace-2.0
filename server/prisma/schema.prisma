generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  DIRECTOR
  MEMBER
}

enum ProjectStatus {
  NOT_STARTED
  IN_PROGRESS
  REVIEW
  APPROVED
  DONE
}

enum TaskStatus {
  TODO
  DOING
  REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

model User {
  id               String     @id 
  email            String     @unique
  name             String?
  avatarUrl        String?
  role             Role       @default(MEMBER)
  tasks            Task[]     @relation("AssignedTasks")
  createdTasks     Task[]     @relation("CreatedTasks")
  logs             Log[]
  comments         Comment[]
  projects         Project[]  @relation("ProjectMembers")
  createdProjects  Project[]  @relation("CreatedProjects") 
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt @default(now())   
}

model Project {
  id          String         @id @default(cuid())
  title       String
  description String?
  status      ProjectStatus  @default(NOT_STARTED)
  labels      Label[]
  tasks       Task[]
  members     User[]         @relation("ProjectMembers")
  createdBy   User           @relation("CreatedProjects", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}


model Task {
  id           String     @id @default(cuid())
  title        String
  description  String?
  status       TaskStatus @default(TODO)
  priority     Priority   @default(MEDIUM)
  dueDate      DateTime?
  project      Project    @relation(fields: [projectId], references: [id])
  projectId    String
  assignedTo   User?      @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId String?
  createdBy    User       @relation("CreatedTasks", fields: [createdById], references: [id])
  createdById  String
  comments     Comment[]
  logs         Log[]
  labels       Label[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Label {
  id        String   @id @default(cuid())
  name      String
  color     String
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
  tasks     Task[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  createdAt DateTime @default(now())
}

model Log {
  id        String   @id @default(cuid())
  message   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  createdAt DateTime @default(now())
}
