generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum Role {
  MEMBER
  ADMIN
}

model User {
  id              String               @id @default(cuid())
  clerkId         String               @unique
  name            String
  email           String               @unique
  avatarUrl       String?
  memberships     OrganizationMember[]
  createdTasks    Task[]               @relation("CreatedTasks")
  taskAssignments TaskAssignment[]
  taskReviews     TaskReview[]
  comments        Comment[]
  calendarPins    CalendarPin[]
  activityLogs    ActivityFeed[]
}

model Organization {
  id           String               @id @default(cuid())
  name         String
  avatarImage  String?
  members      OrganizationMember[]
  projects     Project[]
  calendarPins CalendarPin[]
  activityLogs ActivityFeed[]
  createdAt    DateTime             @default(now())
}

model OrganizationMember {
  id             String @id @default(cuid())
  userId         String
  organizationId String
  role           Role   @default(MEMBER)

  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  @@unique([userId, organizationId])
}

model Project {
  id           String            @id @default(cuid())
  orgId        String
  name         String
  description  String?
  organization Organization      @relation(fields: [orgId], references: [id])
  tasks        Task[]
  categories   ProjectCategory[]
  files        File[]
  createdAt    DateTime          @default(now())
}

model Task {
  id            String     @id @default(cuid())
  projectId     String
  creatorId     String
  title         String
  description   String?
  status        TaskStatus @default(TODO)
  dueDate       DateTime?
  reviewSummary String?
  createdAt     DateTime   @default(now())

  project Project @relation(fields: [projectId], references: [id])
  creator User    @relation("CreatedTasks", fields: [creatorId], references: [id])

  attachments   File[]
  comments      Comment[]
  labels        TaskLabel[]
  assignedUsers TaskAssignment[]
  reviewers     TaskReview[]
}

model TaskAssignment {
  id     String @id @default(cuid())
  taskId String
  userId String

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([taskId, userId])
}

model TaskReview {
  id       String  @id @default(cuid())
  taskId   String
  userId   String
  approved Boolean @default(false)
  comment  String?

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([taskId, userId])
}

model File {
  id         String   @id @default(cuid())
  url        String
  name       String
  type       String
  uploadedAt DateTime @default(now())
  projectId  String?
  taskId     String?

  project Project? @relation(fields: [projectId], references: [id])
  task    Task?    @relation(fields: [taskId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  content   String
  createdAt DateTime @default(now())

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Category {
  id       String            @id @default(cuid())
  name     String            @unique
  projects ProjectCategory[]
}

model ProjectCategory {
  id         String @id @default(cuid())
  projectId  String
  categoryId String

  project  Project  @relation(fields: [projectId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@unique([projectId, categoryId])
}

model Label {
  id    String      @id @default(cuid())
  name  String      @unique
  tasks TaskLabel[]
}

model TaskLabel {
  id      String @id @default(cuid())
  taskId  String
  labelId String

  task  Task  @relation(fields: [taskId], references: [id])
  label Label @relation(fields: [labelId], references: [id])

  @@unique([taskId, labelId])
}

model CalendarPin {
  id          String   @id @default(cuid())
  orgId       String
  userId      String
  title       String
  description String
  timestamp   DateTime @default(now())

  organization Organization @relation(fields: [orgId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
}

model ActivityFeed {
  id        String   @id @default(cuid())
  orgId     String
  userId    String
  content   String
  createdAt DateTime @default(now())

  organization Organization @relation(fields: [orgId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
}
