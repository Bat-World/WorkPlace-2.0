generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id          String        @id @default(cuid())
  title       String
  description String?
  avatarUrl   String?       
  status      ProjectStatus @default(NOT_STARTED)
  createdById String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   User            @relation("CreatedProjects", fields: [createdById], references: [id])
  invitations Invitation[]
  labels      Label[]
  tasks       Task[]
  members     ProjectMember[] @relation("ProjectMembers")
}

model ProjectMember {
  id        String   @id @default(cuid())
  role      Role     @default(MEMBER)
  userId    String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation("ProjectMembers", fields: [projectId], references: [id])
  @@unique([userId, projectId]) 
}

model Invitation {
  id          String    @id @default(cuid())
  email       String
  invitedById String
  token       String    @unique
  accepted    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  acceptedAt  DateTime?
  projectId   String
  invitedBy   User      @relation("Invitation_invitedById", fields: [invitedById], references: [id])
  project     Project   @relation(fields: [projectId], references: [id])
}

model User {
  id              String          @id
  name            String?
  email           String          @unique
  avatarUrl       String?
  createdAt       DateTime        @default(now())
  role            Role            @default(MEMBER)
  updatedAt       DateTime        @default(now()) @updatedAt
  comments        Comment[]
  commentLikes    CommentLike[]
  invitations     Invitation[]    @relation("Invitation_invitedById")
  logs            Log[]
  createdProjects Project[]       @relation("CreatedProjects")
  ProjectMember   ProjectMember[]
  assignedTasks   Task[]          @relation("TaskAssignees")
  createdTasks    Task[]          @relation("CreatedTasks")
  reviewedTasks   Task[]          @relation("TaskReviewers")
}

model Task {
  id           String     @id @default(cuid())
  title        String
  description  String?
  body         String?   
  attachments  String[]  
  status       TaskStatus @default(TODO)
  projectId    String
  createdById  String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  dueDate      DateTime?
  priority     Priority   @default(MEDIUM)
  comments     Comment[]
  logs         Log[]
  assignees    User[]     @relation("TaskAssignees")
  createdBy    User       @relation("CreatedTasks", fields: [createdById], references: [id])
  project      Project    @relation(fields: [projectId], references: [id])
  labels       Label[]    @relation("LabelToTask")
  reviewers    User[]     @relation("TaskReviewers")
   doneAt      DateTime? 
}

model Label {
  id        String   @id @default(cuid())
  name      String
  color     String
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])
  tasks     Task[]   @relation("LabelToTask")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  authorId  String
  parentId  String? 
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  task      Task     @relation(fields: [taskId], references: [id])
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  likes     CommentLike[]
}

model CommentLike {
  id        String   @id @default(cuid())
  commentId String
  userId    String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([commentId, userId])
}

model Log {
  id        String   @id @default(cuid())
  message   String
  userId    String
  taskId    String
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  MEMBER
  DIRECTOR
}

enum ProjectStatus {
  NOT_STARTED
  IN_PROGRESS
  REVIEW
  APPROVED
  DONE
}

enum TaskStatus {
  TODO
  DOING
  REVIEW
  APPROVED
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}
